<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.3.5</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.uzeasy</groupId>
	<artifactId>hava_a_try</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>hava_a_try</name>
	<description>Demo project for Spring Boot</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>

		<!-- Starter for using Spring Data JPA with Hibernate -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<!--
				1. 缺少下面的依赖的话，项目在启动的时候，Spring Boot 的自动扫描（ Auto Scan ）功能会将之当做普通的 Java SE 项目，而不是 Java EE （Java Web ）项目对待。
				2. 普通的 Java SE 项目在执行的时候，Java 编译器会将 main 方法的方法体中的内容作为要执行的工作的内容。因此，如果 main 方法的方法体内容为空的话，项目启动后就会停止（因为没有工作要做）。
				3. 项目正常退出（项目的工作执行完毕）的时候，返回消息： Process exited. Code 0.
		 		-->
		<!-- Starter for building web, including RESTful, applications using Spring MVC. Uses Tomcat as the default embedded container -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<!-- Spring Boot Docker Compose Support -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-docker-compose</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<!--
				MySQL Connector/J is a JDBC Type 4 driver,
				which means that it is pure Java implementation of the MySQL protocol and does not rely on the MySQL client libraries.
				This driver supports auto-registration with the Driver Manager, standardized validity checks, categorized SQLExceptions,
				support for large update counts, support for local and offset date-time variants from the java.time package,
				support for JDBC-4.x XML processing, support for per connection client information and support for the NCHAR, NVARCHAR ...
				-->
		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>
		<!-- Starter for testing Spring Boot applications with libraries including JUnit Jupiter, Hamcrest and Mockito -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- Spring Boot Testcontainers Support -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-testcontainers</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- Isolated container management for Java code testing -->
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>junit-jupiter</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- Isolated container management for Java code testing -->
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>mysql</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
